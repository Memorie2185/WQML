# -*- coding: utf-8 -*-
"""OK SHAP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aJ1RKzBMOkIQrhnGhcHzJBXWVdUvTmog
"""

from google.colab import files
files.upload()

files.download('water_potability.csv')

import os
os.listdir()

import pandas as pd
df=pd.read_csv('water_potability.csv')

import numpy as np

df.head()

df.info()

#Mendefenisikan potability sebagai target klasifikasi dan prediksi dengan jenis 'categoring'
df['Potability']=df['Potability'].astype('category')

# membuat batasan nilai minimum dan maksimum untuk setiap kolom yang ada di dalam dataset
cols=df.columns[0:9].to_list()
min_val=[6.52,0,500,0,3,0,0,0,0]
max_val=[6.83,0,1000,4,250,400,2,80,5]
limit=pd.DataFrame(data=[min_val, max_val], columns=cols)

#menghitung nilai mean, standar deviasi, min dan max
df.describe().T.style.background_gradient(subset=['mean','std','50%','count'], cmap='PuBu')

#Jika Portability is 1 - artinya memenuhi kriteria air minum yang layak untuk manusia
df[df['Potability']==1].describe().T.style.background_gradient(subset=['mean','std','50%','count'], cmap='PuBu')

# Jika Portability is 0 - artinya tidak memenuhi kriteria air minum yang layak untuk manusia
df[df['Potability']==0].describe().T.style.background_gradient(subset=['mean','std','50%','count'], cmap='RdBu')

df.isnull().sum()
#Terdapat missing value pada ph, Sulfate, dan Trihalomethanes

#Cek kembali missing value dan menggantinya dengan keterangan Nan
df[df['Sulfate'].isnull()]
df[df['ph'].isnull()]
df[df['Trihalomethanes'].isnull()]

#Selama missing value masih berada pada range potability (0 dan 1), kita dapat menggantinya dengan nilai mean untuk setiap komponen
df['ph']=df['ph'].fillna(df.groupby(['Potability'])['ph'].transform('mean'))
df['Sulfate']=df['Sulfate'].fillna(df.groupby(['Potability'])['Sulfate'].transform('mean'))
df['Trihalomethanes']=df['Trihalomethanes'].fillna(df.groupby(['Potability'])['Trihalomethanes'].transform('mean'))

#Cek hasil input mean pada missing value
df.isna().sum()
#Hasil menunjukkan tidak ada lagi missing value pada setiap komponen

df.describe().T.style.background_gradient(subset=['mean','std','50%','count'], cmap='PuBu')

import shap
shap.initjs()

from sklearn.model_selection import train_test_split
x=df.drop(['Potability'], axis=1)
y=df['Potability']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report

# Model fitting
rf = RandomForestClassifier()
rf.fit(X_train, y_train)

# Prediction
y_pred = rf.predict(X_test)

# Model evaluation
print(classification_report(y_pred, y_test))

# Calculate SHAP values
explainer = shap.TreeExplainer(rf)
shap_values = explainer.shap_values(X_test)

# Summarize the effects of features
shap.summary_plot(shap_values[:,:,1], X_test)

shap.dependence_plot("Organic_carbon", shap_values[:,:,1], X_test,interaction_index="ph")

shap.dependence_plot("Solids", shap_values[:,:,1], X_test,interaction_index="Turbidity")

shap.plots.force(explainer.expected_value[0], shap_values[:,:,1][12,:], X_test.iloc[12, :], matplotlib = True)